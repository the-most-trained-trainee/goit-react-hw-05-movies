{"version":3,"file":"static/js/597.78945ae8.chunk.js","mappings":"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","sources":["components/Cast.jsx","components/movieDataBaseRequest.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getMovieCast } from './movieDataBaseRequest';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieCast(movieId).then(res => setCast(res));\n  }, [movieId]);\n\n  return (\n    <>\n      {cast && (\n        <ul>\n          {cast.map(actor => (\n            <li key={actor.id}>\n              <h3>{actor.name}</h3>\n              <p>{actor.character}</p>\n              <img\n                className=\"movie-img\"\n                src={'https://image.tmdb.org/t/p/w300' + actor.profile_path}\n                alt=\"\"\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","const API_KEY = '8562b39677dad16e2334fc338fdc606e';\n\nconst getTrendMovies = async () => {\n  const trendMovies = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`);\n  return trendMovies.json();\n}\n\nconst getFoundMovies = async (request) => {\n  const foundMovies = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${request}&page=1&include_adult=false`);\n  return foundMovies.json();\n}\n\nconst movieDetailsAdaptation = input => {\n  return {\n    id: input.id,\n    title: input.title,\n    overview: input.overview,\n    release_date: input.release_date,\n    genres: input.genres,\n    popularity: input.popularity,\n    vote_average: input.vote_average,\n    poster_path: input.poster_path,\n  };\n};\n\nconst getMovieByID = async (id) => {\n  const movie = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`);\n  const movieReceived = await movie.json();\n  const movieAdapted = movieDetailsAdaptation(movieReceived);\n  return movieAdapted;\n};\n\nconst reviewsAdapation = input =>\n  input.map(review => ({\n    id: review.id,\n    author: review.author,\n    content: review.content,\n  }));\n\nconst getMovieReviews = async (id) => {\n  const reviews = await fetch(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n  const reviewsJson = await reviews.json();\n  const reviewsReceived = reviewsJson.results;\n  const adaptedReviews = reviewsAdapation(reviewsReceived);\n  return adaptedReviews;\n}\n\nconst castAdapation = input =>\n  input.map(actor => ({\n    id: actor.credit_id,\n    name: actor.name,\n    character: actor.character,\n    profile_path: actor.profile_path,\n  }));\n\nconst getMovieCast = async (id) => {\n  const cast = await fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n  const castJson = await cast.json();\n  const castReceived = castJson.cast;\n  const adaptedCast = castAdapation(castReceived);\n  return adaptedCast;\n}\n\n\n// const movieDetailsAdaptation = input => {\n//   return {\n//     id: input.id,\n//     title: input.title,\n//     overview: input.overview,\n//     release_date: input.release_date,\n//     genres: input.genres,\n//     popularity: input.popularity,\n//     vote_average: input.vote_average,\n//     poster_path: input.poster_path,\n//   };\n// };\n\n// {movie && (\n//   <div className=\"movieinfo-container\">\n//     <img\n//       className=\"movie-img\"\n//       src={'https://image.tmdb.org/t/p/w500' + movie.poster_path}\n//       alt=\"\"\n//     />\n//     <div className=\"movieinfo\">\n//       <h1>\n//         {movie.title} ({movie.release_date.slice(0, 4)})\n//       </h1>\n//       <p>User score: {Math.ceil(movie.vote_average * 10)} %</p>\n//       <h2>Overview</h2>\n//       <p>{movie.overview}</p>\n//       <h2>Genres</h2>\n//       <p>{movie.genres.map(x => x.name + ' ')}</p>\n//       <Link to=\"reviews\" state={{ from: `${location.state.from}` }}>\n//         reviews\n//       </Link>\n//       <span> </span>\n//       <Link to=\"cast\" state={{ from: `${location.state.from}` }}>\n//         cast\n//       </Link>\n//     </div>\n//   </div>\n// )}\n\nexport { getTrendMovies, getFoundMovies, getMovieByID, getMovieReviews, getMovieCast };","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","cast","setCast","movieId","useParams","useEffect","getMovieCast","then","res","map","actor","name","character","className","src","profile_path","alt","id","API_KEY","getTrendMovies","fetch","trendMovies","json","getFoundMovies","request","foundMovies","getMovieByID","movie","movieReceived","movieAdapted","input","title","overview","release_date","genres","popularity","vote_average","poster_path","getMovieReviews","reviews","reviewsJson","reviewsReceived","results","adaptedReviews","review","author","content","castJson","castReceived","adaptedCast","credit_id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}