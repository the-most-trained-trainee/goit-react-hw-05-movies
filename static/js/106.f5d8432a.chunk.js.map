{"version":3,"file":"static/js/106.f5d8432a.chunk.js","mappings":"sMAiEA,UAvDqB,WACnB,OAA0BA,EAAAA,EAAAA,YAA1B,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACJE,GAAWC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MAEZH,EAASI,MAAMC,OAClBC,QAAQC,IAAI,eACZP,EAAW,CAAEI,MAAO,CAAEC,KAAM,OAa9B,OATAC,QAAQC,IAAI,gBAGZC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaX,GAASY,MAAK,SAAAC,GACzBd,EAASc,EACV,GACF,GAAE,CAACb,KAGF,4BACE,mBAAQc,QAZG,kBAAMV,EAAS,GAAD,OAAIF,EAASI,MAAMC,MAAjC,EAYX,mBACCT,IACC,iBAAKiB,UAAU,sBAAf,WACE,gBAAKA,UAAU,YAAYC,IAAKlB,EAAMmB,YAAaC,IAAI,MACvD,iBAAKH,UAAU,YAAf,WACE,0BACGjB,EAAMqB,MADT,KACkBrB,EAAMsB,aADxB,QAGA,wCAAgBtB,EAAMuB,aAAtB,SACA,sCACA,uBAAIvB,EAAMwB,YACV,oCACA,uBAAIxB,EAAMyB,UAEV,SAAC,KAAD,CAAMC,GAAG,UAAUlB,MAAO,CAAEC,KAAK,GAAD,OAAKL,EAASI,MAAMC,OAApD,sBAGA,iCAEA,SAAC,KAAD,CAAMiB,GAAG,OAAOlB,MAAO,CAAEC,KAAK,GAAD,OAAKL,EAASI,MAAMC,OAAjD,yBAMN,SAAC,EAAAkB,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QAIP,C,sLC/DKC,EAAU,mCAEVC,EAAc,mCAAG,oGACKC,MAAM,2DAAD,OAA4DF,IADtE,cACfG,EADe,yBAEdA,EAAYC,QAFE,2CAAH,qDAKdC,EAAc,mCAAG,WAAOC,GAAP,uFACKJ,MAAM,qDAAD,OAAsDF,EAAtD,iCAAsFM,EAAtF,gCADV,cACfC,EADe,yBAEdA,EAAYH,QAFE,2CAAH,sDAkBdpB,EAAY,mCAAG,WAAOwB,GAAP,2FACCN,MAAM,sCAAD,OAAuCM,EAAvC,oBAAqDR,EAArD,oBADN,cACb7B,EADa,gBAESA,EAAMiC,OAFf,cAEbK,EAFa,OAGbC,EAfC,CACLF,IAF2BG,EAgBeF,GAdhCD,GACVhB,MAAOmB,EAAMnB,MACbG,SAAUgB,EAAMhB,SAChBF,aAAckB,EAAMlB,aAAamB,MAAM,EAAG,GAC1ChB,OAAQe,EAAMf,OAAOiB,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAO,GAAb,IAC1BC,WAAYL,EAAMK,WAClBtB,aAAcuB,KAAKC,KAA0B,GAArBP,EAAMjB,cAC9BJ,YAAa,kCAAoCqB,EAAMrB,aAItC,kBAIZoB,GAJY,iCAbU,IAAAC,CAaV,UAAH,sDAcZQ,EAAe,mCAAG,WAAOX,GAAP,6FACAN,MAAM,sCAAD,OAAuCM,EAAvC,4BAA6DR,EAA7D,2BADL,cAChBoB,EADgB,gBAEIA,EAAQhB,OAFZ,cAEhBiB,EAFgB,OAGhBC,EAAkBD,EAAYE,QAC9BC,EAAkCF,EAVlCT,KAAI,SAAAY,GAAM,MAAK,CACnBjB,GAAIiB,EAAOjB,GACXkB,OAAQD,EAAOC,OACfC,QAASF,EAAOE,QAHF,IAMM,kBAKfH,GALe,2CAAH,sDAgBfI,EAAY,mCAAG,WAAOpB,GAAP,6FACAN,MAAM,sCAAD,OAAuCM,EAAvC,4BAA6DR,EAA7D,oBADL,cACb6B,EADa,gBAEIA,EAAKzB,OAFT,cAEb0B,EAFa,OAGbC,EAAeD,EAASD,KACxBG,EAA4BD,EAX5BlB,KAAI,SAAAoB,GAAK,MAAK,CAClBzB,GAAIyB,EAAMC,UACVnB,KAAMkB,EAAMlB,KACZoB,UAAWF,EAAME,UACjBC,aAAc,kCAAoCH,EAAMG,aAJ3C,IAOI,kBAKZJ,GALY,2CAAH,qD,sBCvDlB,SAASK,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAO7D,KAAKwD,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["components/MovieDetails.jsx","components/movieDataBaseRequest.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useState, useEffect, Suspense } from 'react';\nimport {\n  Outlet,\n  useParams,\n  Link,\n  useNavigate,\n  useLocation,\n} from 'react-router-dom';\nimport { getMovieByID } from './movieDataBaseRequest';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState();\n  const { movieId } = useParams();\n  let location = useLocation();\n  const navigate = useNavigate();\n\n  if (!location.state.from) {\n    console.log('no location')\n    location = { state: { from: '/' } };\n  }\n\n  const goBack = () => navigate(`${location.state.from}`);\n  console.log(\"location if\");\n\n\n  useEffect(() => {\n    getMovieByID(movieId).then(res => {\n      setMovie(res);\n    });\n  }, [movieId]);\n\n  return (\n    <div>\n      <button onClick={goBack}> Back</button>\n      {movie && (\n        <div className=\"movieinfo-container\">\n          <img className=\"movie-img\" src={movie.poster_path} alt=\"\" />\n          <div className=\"movieinfo\">\n            <h1>\n              {movie.title} ({movie.release_date})\n            </h1>\n            <p>User score: {movie.vote_average} %</p>\n            <h2>Overview</h2>\n            <p>{movie.overview}</p>\n            <h2>Genres</h2>\n            <p>{movie.genres}</p>\n            {/* <Link to=\"reviews\" state={{ from: `/` }}> */}\n            <Link to=\"reviews\" state={{ from: `${location.state.from}` }}>\n              reviews\n            </Link>\n            <span> </span>\n            {/* <Link to=\"cast\" state={{ from: `/` }}> */}\n            <Link to=\"cast\" state={{ from: `${location.state.from}` }}>\n              cast\n            </Link>\n          </div>\n        </div>\n      )}\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","const API_KEY = '8562b39677dad16e2334fc338fdc606e';\n\nconst getTrendMovies = async () => {\n  const trendMovies = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`);\n  return trendMovies.json();\n}\n\nconst getFoundMovies = async (request) => {\n  const foundMovies = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${request}&page=1&include_adult=false`);\n  return foundMovies.json();\n}\n\nconst movieDetailsAdaptation = input => {\n  return {\n    id: input.id,\n    title: input.title,\n    overview: input.overview,\n    release_date: input.release_date.slice(0, 4),\n    genres: input.genres.map(x => x.name + ' '),\n    popularity: input.popularity,\n    vote_average: Math.ceil(input.vote_average * 10),\n    poster_path: 'https://image.tmdb.org/t/p/w500' + input.poster_path,\n  };\n};\n\nconst getMovieByID = async (id) => {\n  const movie = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`);\n  const movieReceived = await movie.json();\n  const movieAdapted = movieDetailsAdaptation(movieReceived);\n  return movieAdapted;\n};\n\nconst reviewsAdapation = input =>\n  input.map(review => ({\n    id: review.id,\n    author: review.author,\n    content: review.content,\n  }));\n\nconst getMovieReviews = async (id) => {\n  const reviews = await fetch(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n  const reviewsJson = await reviews.json();\n  const reviewsReceived = reviewsJson.results;\n  const adaptedReviews = reviewsAdapation(reviewsReceived);\n  return adaptedReviews;\n}\n\nconst castAdapation = input =>\n  input.map(actor => ({\n    id: actor.credit_id,\n    name: actor.name,\n    character: actor.character,\n    profile_path: 'https://image.tmdb.org/t/p/w300' + actor.profile_path,\n  }));\n\nconst getMovieCast = async (id) => {\n  const cast = await fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n  const castJson = await cast.json();\n  const castReceived = castJson.cast;\n  const adaptedCast = castAdapation(castReceived);\n  return adaptedCast;\n}\n\nexport { getTrendMovies, getFoundMovies, getMovieByID, getMovieReviews, getMovieCast };","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","movie","setMovie","movieId","useParams","location","useLocation","navigate","useNavigate","state","from","console","log","useEffect","getMovieByID","then","res","onClick","className","src","poster_path","alt","title","release_date","vote_average","overview","genres","to","Suspense","fallback","API_KEY","getTrendMovies","fetch","trendMovies","json","getFoundMovies","request","foundMovies","id","movieReceived","movieAdapted","input","slice","map","x","name","popularity","Math","ceil","getMovieReviews","reviews","reviewsJson","reviewsReceived","results","adaptedReviews","review","author","content","getMovieCast","cast","castJson","castReceived","adaptedCast","actor","credit_id","character","profile_path","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}