{"version":3,"file":"static/js/221.eac154d2.chunk.js","mappings":"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","sources":["components/Movies.jsx","components/movieDataBaseRequest.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useState, useEffect, Suspense } from 'react';\nimport { Outlet, Link, useSearchParams } from 'react-router-dom';\nimport { getFoundMovies } from './movieDataBaseRequest';\n\nconst Movies = () => {\n  const [searchInput, setSearchInput] = useState('');\n  const [foundMovies, setFoundMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    if (searchParams.get('query')) {\n      setSearchInput(searchParams.get('query'));\n      receiveFound(searchParams.get('query'));\n    }\n  }, [searchParams]);\n\n  const handleChange = e => {\n    setSearchInput(e.currentTarget.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (searchInput.trim() === '') {\n      alert('Please enter a valid request!');\n      return;\n    }\n    setSearchParams({ query: searchInput });\n  };\n\n  const receiveFound = async request => {\n    const found = await getFoundMovies(request);\n    setFoundMovies(found.results);\n  };\n\n  return (\n    <>\n      <form className=\"\" onSubmit={handleSubmit}>\n        <button type=\"submit\" className=\"\">\n          <span className=\"\">Search</span>\n        </button>\n        <input\n          className=\"\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          onChange={handleChange}\n          value={searchInput}\n        />\n      </form>\n      <ul>\n        {foundMovies &&\n          foundMovies.map(film => (\n            <li key={film.id}>\n              <Link\n                to={`${film.id}`}\n                state={{ from: '/movies?query=' + searchInput }}\n              >\n                {film.original_title}\n              </Link>\n            </li>\n          ))}\n      </ul>\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default Movies;\n","const API_KEY = '8562b39677dad16e2334fc338fdc606e';\n\nconst getTrendMovies = async () => {\n  const trendMovies = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`);\n  return trendMovies.json();\n}\n\nconst getFoundMovies = async (request) => {\n  const foundMovies = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${request}&page=1&include_adult=false`);\n  return foundMovies.json();\n}\n\nconst movieDetailsAdaptation = input => {\n  return {\n    id: input.id,\n    title: input.title,\n    overview: input.overview,\n    release_date: input.release_date,\n    genres: input.genres,\n    popularity: input.popularity,\n    vote_average: input.vote_average,\n    poster_path: input.poster_path,\n  };\n};\n\nconst getMovieByID = async (id) => {\n  const movie = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`);\n  const movieReceived = await movie.json();\n  const movieAdapted = movieDetailsAdaptation(movieReceived);\n  return movieAdapted;\n};\n\nconst reviewsAdapation = input =>\n  input.map(review => ({\n    id: review.id,\n    author: review.author,\n    content: review.content,\n  }));\n\nconst getMovieReviews = async (id) => {\n  const reviews = await fetch(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n  const reviewsJson = await reviews.json();\n  const reviewsReceived = reviewsJson.results;\n  const adaptedReviews = reviewsAdapation(reviewsReceived);\n  return adaptedReviews;\n}\n\nconst castAdapation = input =>\n  input.map(actor => ({\n    id: actor.credit_id,\n    name: actor.name,\n    character: actor.character,\n    profile_path: actor.profile_path,\n  }));\n\nconst getMovieCast = async (id) => {\n  const cast = await fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n  const castJson = await cast.json();\n  const castReceived = castJson.cast;\n  const adaptedCast = castAdapation(castReceived);\n  return adaptedCast;\n}\n\n\n// const movieDetailsAdaptation = input => {\n//   return {\n//     id: input.id,\n//     title: input.title,\n//     overview: input.overview,\n//     release_date: input.release_date,\n//     genres: input.genres,\n//     popularity: input.popularity,\n//     vote_average: input.vote_average,\n//     poster_path: input.poster_path,\n//   };\n// };\n\n// {movie && (\n//   <div className=\"movieinfo-container\">\n//     <img\n//       className=\"movie-img\"\n//       src={'https://image.tmdb.org/t/p/w500' + movie.poster_path}\n//       alt=\"\"\n//     />\n//     <div className=\"movieinfo\">\n//       <h1>\n//         {movie.title} ({movie.release_date.slice(0, 4)})\n//       </h1>\n//       <p>User score: {Math.ceil(movie.vote_average * 10)} %</p>\n//       <h2>Overview</h2>\n//       <p>{movie.overview}</p>\n//       <h2>Genres</h2>\n//       <p>{movie.genres.map(x => x.name + ' ')}</p>\n//       <Link to=\"reviews\" state={{ from: `${location.state.from}` }}>\n//         reviews\n//       </Link>\n//       <span> </span>\n//       <Link to=\"cast\" state={{ from: `${location.state.from}` }}>\n//         cast\n//       </Link>\n//     </div>\n//   </div>\n// )}\n\nexport { getTrendMovies, getFoundMovies, getMovieByID, getMovieReviews, getMovieCast };","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","searchInput","setSearchInput","foundMovies","setFoundMovies","useSearchParams","searchParams","setSearchParams","useEffect","get","receiveFound","request","getFoundMovies","found","results","className","onSubmit","e","preventDefault","trim","query","alert","type","autoComplete","autoFocus","placeholder","onChange","currentTarget","value","map","film","to","id","state","from","original_title","Suspense","fallback","API_KEY","getTrendMovies","fetch","trendMovies","json","getMovieByID","movie","movieReceived","movieAdapted","input","title","overview","release_date","genres","popularity","vote_average","poster_path","getMovieReviews","reviews","reviewsJson","reviewsReceived","adaptedReviews","review","author","content","getMovieCast","cast","castJson","castReceived","adaptedCast","actor","credit_id","name","character","profile_path","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}